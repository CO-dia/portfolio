---
import Layout from "@/layouts/Layout.astro";
import { render } from "astro:content";
import { getCollection } from "astro:content";

// 1️⃣ Tell Astro which pages to generate
export async function getStaticPaths() {
  const challenges = await getCollection("ctf");

  // Only include challenges inside pico-ctf/Web
  const webChallenges = challenges.filter((c) =>
    c.id.startsWith("pico-ctf/web/")
  );

  return webChallenges.map((c) => ({
    params: { slug: c.slug.split("/").pop() },
    props: { challenge: c },
  }));
}

// 2️⃣ Receive props for each generated page
const { challenge } = Astro.props;
const { title, date, tags, difficulty } = challenge.data;
const { Content } = await render(challenge);
---

<Layout title={challenge.data.title}>
  <div class='max-w-4xl mx-auto'>
		<article
			class='prose max-w-none prose-headings:text-base-content prose-p:text-base-content/80'
		>
			<!-- Header section -->
			<div class='mb-8 border-b pb-8'>
				<h1 class='text-4xl font-bold mb-4 text-base-content'>{title}</h1>
				<div class='flex flex-wrap items-center gap-4 text-base-content/70'>
					<!-- Date -->
					<time datetime={date?.toISOString()} class='flex items-center'>
						<svg
							xmlns='http://www.w3.org/2000/svg'
							class='h-4 w-4 mr-2'
							fill='none'
							viewBox='0 0 24 24'
							stroke='currentColor'
						>
							<path
								stroke-linecap='round'
								stroke-linejoin='round'
								stroke-width='2'
								d='M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z'
							></path>
						</svg>
						{
							new Date(date).toLocaleDateString('en-US', {
								year: 'numeric',
								month: 'long',
								day: 'numeric',
							})
						}
					</time>

					<!-- Difficulty -->
					{
						difficulty && (
							<div class='flex flex-wrap gap-2'>
								<span class={`badge ` + (difficulty === "Easy" ? "badge-success" : difficulty === "Medium" ? "badge-warning" : "badge-error")}>{difficulty}</span>
							</div>
						)
					}

					<!-- Tags -->
					{
						tags && (
							<div class='flex flex-wrap gap-2'>
								{tags.map(tag => (
									<span class='badge badge-accent badge-outline'>{tag}</span>
								))}
							</div>
						)
					}
				</div>
			</div>

			<!-- Post content -->
			<div
				class='prose mt-8 prose-h2:text-2xl prose-h2:font-bold prose-h2:mb-4
         prose-h3:text-xl prose-h3:font-semibold prose-h3:mb-3
         prose-p:mb-4 prose-p:leading-relaxed
         prose-strong:text-base-content prose-strong:font-bold
         prose-em:italic
         prose-a:text-accent prose-a:no-underline hover:prose-a:underline
         prose-code:text-accent prose-code:bg-base-200 prose-code:px-1 prose-code:py-0.5 prose-code:rounded
         prose-blockquote:border-l-4 prose-blockquote:border-accent prose-blockquote:pl-4 prose-blockquote:italic
         prose-ul:list-disc prose-ul:pl-6
         prose-ol:list-decimal prose-ol:pl-6
         prose-li:mb-2
         prose-img:rounded-lg prose-img:my-8'
        >
                <Content />
			</div>
		</article>
	</div>
</Layout>
